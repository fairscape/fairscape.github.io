{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to FAIRSCAPE","text":"<p>FAIRSCAPE<sup>1</sup> is a computational framework written in Python that implements the FAIR<sup>2</sup> data principles on components such as datasets, software, computations, runtime parameters, environment and personnel involved in a computational analysis. It generates fully FAIR evidence of correctness of the analysis by recording formal representations of the components and their interactions in the form of a graph called Evidence Graph. For every computational result, FAIRSCAPE creates a machine interpretable Evidence Graph whose nodes and edges may contain persistent identifiers with metadata resolvable to the underling components.</p> <p>FAIRSCAPE provides a command line client tool to package and validate the components with metadata, a schema generation and validation component for the datasets, a graphical user interface (GUI) for creating RO-Crate packages, and a REST API to perform various operations on the server-side. Together, these tools enable users to interact with FAIRSCAPE in ways that best suit their workflow and technical preferences.</p>"},{"location":"#fairscape-server","title":"FAIRSCAPE Server","text":""},{"location":"#fairscape-server-mds","title":"FAIRSCAPE Server - MDS","text":"<p>The Metadata Service (MDS) of the FAIRSCAPE application is the core backend service responsible for metadata management. MDS is a RESTful API implemented in Python with the FastAPI framework. This service provides persistent globally unique identifiers (GUIDs) as ARKs for many types of digital objects and maintains provenance metadata during the data science life-cycle.</p> <ul> <li>GitHub Repository</li> </ul>"},{"location":"#fairscape-client","title":"FAIRSCAPE Client","text":""},{"location":"#command-line-client","title":"Command Line Client","text":""},{"location":"#fairscape-cli-a-validation-and-packaging-command-line-tool","title":"FAIRSCAPE CLI - A Validation and Packaging Command Line Tool","text":"<p>A data validation and packaging utility for the FAIRSCAPE ecosystem. It provides a command line interface that allows client-side remote teams to create RO-Crate and BagIt packages.</p> <ul> <li>Documentation</li> </ul>"},{"location":"#gui-client","title":"GUI Client","text":""},{"location":"#fairscape-gui-an-ro-crate-packaging-and-upload-tool","title":"FAIRSCAPE GUI - An RO-Crate Packaging and Upload Tool","text":"<p>A data packaging utility for the FAIRSCAPE ecosystem. It provides a graphical user interface that allows client-side remote teams to create RO-Crate packages.</p> <ul> <li>Documentation</li> </ul>"},{"location":"#fairscape-rest-api-documentation","title":"FAIRSCAPE REST API Documentation","text":"<p>FAIRSCAPE provides a REST API documentation UI powered by Swagger UI. This interface allows clients to use the <code>Try it out</code> button to run operations on the endpoints.</p> <ul> <li>API Documentation</li> </ul> <ol> <li> <p>Levinson, M. A., Niestroy, J., Al Manir, S., Fairchild, K., Lake, D. E., Moorman, J. R., &amp; Clark, T. (2022). FAIRSCAPE: a Framework for FAIR and Reproducible Biomedical Analytics. Neuroinformatics, 20(1), 187\u2013202. https://doi.org/10.1007/s12021-021-09529-4 \u21a9</p> </li> <li> <p>Wilkinson, M. D., Dumontier, M., Aalbersberg, I. J., Appleton, G., Axton, M., Baak, A., Blomberg, N., Boiten, J. W., da Silva Santos, L. B., Bourne, P. E., Bouwman, J., Brookes, A. J., Clark, T., Crosas, M., Dillo, I., Dumon, O., Edmunds, S., Evelo, C. T., Finkers, R., Gonzalez-Beltran, A., \u2026 Mons, B. (2016). The FAIR Guiding Principles for scientific data management and stewardship. Scientific data, 3, 160018. https://doi.org/10.1038/sdata.2016.18 \u21a9</p> </li> </ol>"},{"location":"GUI/GUI/","title":"FAIRSCAPE GUI","text":"<p>The FAIRSCAPE Electron App provides a user-friendly interface for packaging research objects and validating metadata, making it easier to ensure your research data is FAIR (Findable, Accessible, Interoperable, and Reusable).</p>"},{"location":"GUI/GUI/#features","title":"Features","text":"<p>FAIRSCAPE Electron offers the same functionality as the fairscape-cli, wrapped in a graphical user interface:</p> <ul> <li>RO-Crate Creation: Create Research Object Crates (RO-Crates) to package your research data with its associated metadata.</li> <li>Metadata Registration: Register and manage metadata for your research objects through user-friendly forms.</li> <li>Schema Description: Describe the schema of tabular datasets.</li> <li>Step-by-Step Workflow: Navigate through the process of creating, packaging, and uploading your research objects with our guided interface.</li> </ul>"},{"location":"GUI/GUI/#installation","title":"Installation","text":"<ol> <li>Go to the Releases page.</li> <li>Download and run the latest version for your operating system (Windows, macOS, or Linux).</li> </ol>"},{"location":"GUI/GUI/#getting-started","title":"Getting Started","text":"<ol> <li>Launch FAIRSCAPE Electron.</li> <li>You'll be started questionnaire to help determine where to start.</li> <li>The app will guide you through all the required steps:</li> <li>Initialize your project</li> <li>Register files</li> <li>Register computations (if needed)</li> <li>Review your RO-Crate</li> <li>Package your research object</li> <li>Upload to your RO-Crate to Fairscape</li> </ol>"},{"location":"api/","title":"FAIRSCAPE API","text":"<p>FAIRSCAPE auto-generates reference documentation using FastAPI, the modern Web framework for building APIs with Python 3.8+ based on standard Python type hints.</p> <ul> <li>FAIRSCAPE REST docs UI: It is provided by   Swagger UI and allows a client to use <code>Try it out</code> button to run operations   on the endpoints.</li> </ul>","tags":["REST API"]},{"location":"api/resultful/","title":"RESTful endpoints","text":""},{"location":"getting-started/configuration/","title":"Configuration Documentation","text":"<p>This document provides a brief overview of the environment variables utilized in fairscape, along with their default values for deploying locally. Before running fairscape, ensure that these environment variables are correctly set in your .env file. You can specify the path to your .env file using the --config option.</p>"},{"location":"getting-started/configuration/#important-environmental-variables","title":"Important environmental variables","text":"<ul> <li> <p>FAIRSCAPE_HOST: The host address for FAIRSCAPE. Default is \"0.0.0.0\".</p> </li> <li> <p>FAIRSCAPE_PORT: The port on which FAIRSCAPE listens. Default is \"8080\".</p> </li> <li> <p>FAIRSCAPE_MONGO_HOST: The hostname or IP address of the MongoDB server. Default is \"localhost\".</p> </li> <li> <p>FAIRSCAPE_MONGO_PORT: The port on which the MongoDB server is running. Default is \"27017\".</p> </li> <li> <p>FAIRSCAPE_MONGO_ACCESS_KEY: The access key used for MongoDB authentication. Default is \"mongotestaccess\".</p> </li> <li> <p>FAIRSCAPE_MONGO_SECRET_KEY: The secret key used for MongoDB authentication. Default is \"mongotestsecret\".</p> </li> <li> <p>FAIRSCAPE_MONGO_DATABASE: The name of the MongoDB database used by FAIRSCAPE. Default is \"**FAIRSCAPE\".</p> </li> <li> <p>FAIRSCAPE_MONGO_IDENTIFIER_COLLECTION: The name of the MongoDB collection used for storing identifiers. Default is \"mds\".</p> </li> <li> <p>FAIRSCAPE_MONGO_USER_COLLECTION: The name of the MongoDB collection used for storing user information. Default is \"users\".</p> </li> <li> <p>FAIRSCAPE_MONGO_ROCRATE_COLLECTION: The name of the MongoDB collection used for storing RO-Crate metadata. Default is \"rocrate\".</p> </li> <li> <p>FAIRSCAPE_MINIO_URI: The URI of the MinIO server. Default is \"localhost\".</p> </li> <li> <p>FAIRSCAPE_MINIO_PORT: The port on which the MinIO server is running. Default is \"9000\".</p> </li> <li> <p>FAIRSCAPE_MINIO_ACCESS_KEY: The access key used for MinIO authentication. Default is \"miniotestadmin\".</p> </li> <li> <p>FAIRSCAPE_MINIO_SECRET_KEY: The secret key used for MinIO authentication. Default is \"miniotestsecret\".</p> </li> <li> <p>FAIRSCAPE_MINIO_DEFAULT_BUCKET: The default bucket name used in MinIO. Default is \"default\".</p> </li> <li> <p>FAIRSCAPE_MINIO_ROCRATE_BUCKET: The bucket name used for storing RO-Crate zip files in MinIO. Default is \"rocrate\".</p> </li> <li> <p>FAIRSCAPE_MINIO_SECURE: Specifies whether to use secure (HTTPS) connection for MinIO. Default is \"False\".</p> </li> <li> <p>FAIRSCAPE_ARK_NAAN: The Name Assigning Authority Number (NAAN) used for ARK identifiers. Default is \"99999\" which is for testing.</p> </li> </ul>"},{"location":"getting-started/installation/","title":"Installation Options","text":""},{"location":"getting-started/installation/#install-using-docker-compose","title":"Install using docker compose","text":"<pre><code>wget https://raw.githubusercontent.com/fairscape/mds_python/main/compose-dev.yaml \ndocker-compose up compose-dev.yaml\n</code></pre>"},{"location":"getting-started/installation/#install-using-kubernetes","title":"Install using kubernetes","text":"<pre><code>wget https://raw.githubusercontent.com/fairscape/mds_python/main/k8s-manifest-local.yml\nkubectl create -f k8s-manifest-local.yml\n</code></pre>"},{"location":"getting-started/installation/#install-from-repository","title":"Install from repository","text":"<pre><code>git clone https://github.com/fairscape/mds_python.git\npip install -r requirements.txt\ncd src/\nuvicorn fairscape_mds.mds.app:app --host 0.0.0.0 --config PATH_TO_YOUR.env\n</code></pre> <p>set up mongo</p> <ul> <li>run with docker</li> <li>local run refer to mongo docs</li> </ul> <p>set up minio</p> <ul> <li>run with docker</li> <li>local refer to mongo docs</li> </ul>"},{"location":"tutorial/dataset/","title":"Dataset","text":""},{"location":"tutorial/dataset/#create-a-dataset-metadata-record","title":"Create a dataset metadata record","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.pods.uvarc.io/\"\n\ndataset_metadata = {\n    \"@id\": \"ark:99999/test-dataset\",\n    \"@type\": \"evi:Dataset\",\n    \"name\": \"test dataset\",\n    \"description\": \"an example metadata set for a test dataset\",\n    \"keywords\": [ \"test\", \"fair\"],\n    \"owner\": \"ark:99999/a-person\",\n    \"author\": \"John Doe\"\n}\n\n# create dataset\ncreate_dataset = requests.post(root_url + \"dataset\", data=json.dumps(dataset_data))\ncreate_dataset.json()\n</code></pre> <pre><code>curl -X 'POST' \\\n  'https://fairscape.pods.uvarc.io/dataset' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"@context\": {\n    \"@vocab\": \"https://schema.org/\",\n    \"evi\": \"https://w3id.org/EVI#\"\n  },\n    \"@id\": \"ark:99999/test-dataset\",\n    \"@type\": \"evi:Dataset\",\n    \"name\": \"test dataset\",\n    \"description\": \"an example metadata set for a test dataset\",\n    \"keywords\": [ \"test\", \"fair\"],\n    \"owner\": \"ark:99999/a-person\",\n    \"author\": \"John Doe\"\n}'\n</code></pre>"},{"location":"tutorial/dataset/#fetch-a-dataset-metadata-record","title":"Fetch a dataset metadata record","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.pods.uvarc.io/\"\n\n# fetch dataset\nget_dataset = requests.get(root_url + f\"dataset/{dataset_metadata['@id']}\")\nget_dataset.json()\n</code></pre> <pre><code>curl -X 'GET' 'https://fairscape.pods.uvarc.io/dataset/ark:99999/test-dataset' \\\n     -H 'accept: application/json'\n</code></pre>"},{"location":"tutorial/dataset/#update-a-dataset-metadata-record","title":"Update a dataset metadata record","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.pods.uvarc.io/\"\n\nupdated_dataset_data = {\n    \"@id\": \"ark:99999/test-dataset\",\n    \"@type\": \"evi:Dataset\",\n    \"name\": \"Updated dataset\",\n    \"description\": \"New description\",\n    \"keywords\": [ \"test\", \"fair\"],\n    \"owner\": \"ark:99999/a-person\",\n    \"author\": \"John Doe\"\n}\n\n# update dataset\nupdate_dataset = requests.put(root_url + \"dataset\", data=json.dumps(updated_dataset_metadata))\nupdate_dataset.json()\n</code></pre> <pre><code>curl -X 'PUT' \\\n  'https://fairscape.pods.uvarc.io/dataset' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"@context\": {\n    \"@vocab\": \"https://schema.org/\",\n    \"evi\": \"https://w3id.org/EVI#\"\n  },\n    \"@id\": \"ark:99999/test-dataset\",\n    \"@type\": \"evi:Dataset\",\n    \"name\": \"Updated dataset\",\n    \"description\": \"New description\",\n    \"keywords\": [ \"test\", \"fair\"],\n    \"owner\": \"ark:99999/a-person\",\n    \"author\": \"John Doe\"\n}'\n</code></pre>"},{"location":"tutorial/login/","title":"Logging In","text":""},{"location":"tutorial/login/#login","title":"Login","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.net/api/\"\n\nlogin_data = {\n    \"username\": \"testuser@example.org\",\n    \"password\": \"test\"\n}\n\n# Login request\nlogin_response = requests.post(root_url + \"login\", data=json.dumps(login_data))\n\n# Check if the request was successful\nif login_response.status_code == 200:\n    # Parse the JSON response\n    token_data = login_response.json()\n\n    # Extract the token\n    token = token_data.get('token')\n\n    print(f\"Login successful. Token: {token}\")\nelse:\n    print(f\"Login failed. Status code: {login_response.status_code}\")\n    print(f\"Error message: {login_response.text}\")\n</code></pre> <pre><code>curl -X 'POST' \\\n'https://fairscape.net/api/login' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/json' \\\n-d '{\n    \"username\": \"testuser@example.org\",\n    \"password\": \"test\"\n}'\n</code></pre>"},{"location":"tutorial/rocrate/","title":"Operations with rocrates","text":""},{"location":"tutorial/rocrate/#upload-a-rocrate","title":"Upload a rocrate","text":"pythoncurl <pre><code>import json\nimport requests\nfrom requests_toolbelt.multipart.encoder import MultipartEncoder\n\nroot_url = \"https://fairscape.net/api/\"\ncrate_path = '/Path/to/zip/file.zip'\ntoken = \"your_bearer_token_here\"\n\nmp_encoder = MultipartEncoder(\n    fields={\n        'file': ('file.zip', open(crate_path, 'rb'), 'application/zip')\n    }\n)\n\n# upload a rocrate to minio object store\nrocrate_transfer = requests.post(\n    url=request_url + 'rocrate/upload',\n    data=mp_encoder,\n    # The MultipartEncoder provides the content-type header with the boundary:\n    headers={'Authorization': f'Bearer {token}'}\n)\n\nrocrate_transfer.json()\n</code></pre> <pre><code>curl -X POST -F \"file=@/Path/to/zip/file.zip\" https://fairscape.net/api/rocrate/upload \\ -H \"Authorization: Bearer your_bearer_token_here\"\n</code></pre>"},{"location":"tutorial/rocrate/#list-all-rocrates","title":"List all rocrates","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.net/api/\"\n\n# fetch rocrate\nget_rocrate = requests.get(root_url + \"rocrate\", headers={'Authorization': f'Bearer {token}'})\nget_rocrate.json()\n</code></pre> <pre><code>curl -X 'GET' 'https://fairscape.net/api/rocrate' \\\n     -H 'accept: application/json'\n</code></pre>"},{"location":"tutorial/rocrate/#fetch-a-rocrate-metadata-record","title":"Fetch a rocrate metadata record","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.net/api/\"\n\n# fetch rocrate\nget_rocrate = requests.get(root_url + f\"rocrate/{rocrate_transfer['@id']}\", headers={'Authorization': f'Bearer {token}'})\nget_rocrate.json()\n</code></pre> <pre><code>curl -X 'GET' 'https://fairscape.net/api/rocrate/ark:99999/test-rocrate' \\\n     -H 'accept: application/json'\n</code></pre>"},{"location":"tutorial/rocrate/#download-an-archived-rocrate","title":"Download an archived rocrate","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.net/api/\"\n\nresponse = requests.get(\n    url=request_url + 'rocrate/archived/download/' + rocrate_transfer['@id'],\n    headers={'Authorization': f'Bearer {token}'}\n)\n\nwith open('/Path/to/output.zip', 'wb') as file:\n        file.write(response.content)\n</code></pre> <pre><code>curl -o /Path/to/output.zip https://fairscape.net/api/rocrate/archived/download/your_rocrate_id_here\n</code></pre>"},{"location":"tutorial/software/","title":"Software","text":""},{"location":"tutorial/software/#create-a-software-metadata-record","title":"Create a software metadata record","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.pods.uvarc.io/\"\n\nsoftware_metadata = {\n    \"@id\": \"ark:99999/test-software\",\n    \"@type\": \"evi:software\",\n    \"name\": \"test software\",\n    \"description\": \"example metadata for a test software\",\n    \"keywords\": [ \"test\", \"fair\"],\n    \"owner\": \"ark:99999/a-person\",\n    \"author\": \"John Doe\"\n}\n\n# create software\ncreate_software = requests.post(root_url + \"software\", data=json.dumps(software_metadata))\ncreate_software.json()\n</code></pre> <pre><code>curl -X 'POST' \\\n  'https://fairscape.pods.uvarc.io/software' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"@context\": {\n    \"@vocab\": \"https://schema.org/\",\n    \"evi\": \"https://w3id.org/EVI#\"\n  },\n    \"@id\": \"ark:99999/test-software\",\n    \"@type\": \"evi:software\",\n    \"name\": \"test software\",\n    \"description\": \"example metadata for a test software\",\n    \"keywords\": [ \"test\", \"fair\"],\n    \"owner\": \"ark:99999/a-person\",\n    \"author\": \"John Doe\"\n}'\n</code></pre>"},{"location":"tutorial/software/#fetch-a-software-metadata-record","title":"Fetch a software metadata record","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.pods.uvarc.io/\"\n\n# fetch software\nget_software = requests.get(root_url + f\"software/{software_metadata['@id']}\")\nget_software.json()\n</code></pre> <pre><code>curl -X 'GET' 'https://fairscape.pods.uvarc.io/software/ark:99999/test-software' \\\n     -H 'accept: application/json'\n</code></pre>"},{"location":"tutorial/software/#update-a-software-metadata-record","title":"Update a software metadata record","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.pods.uvarc.io/\"\n\nupdated_software_data = {\n    \"@id\": \"ark:99999/test-software\",\n    \"@type\": \"evi:software\",\n    \"name\": \"Updated software\",\n    \"description\": \"New description\",\n    \"keywords\": [ \"test\", \"fair\"],\n    \"owner\": \"ark:99999/a-person\",\n    \"author\": \"John Doe\"\n}\n\n# update software\nupdate_software = requests.put(root_url + \"software\", data=json.dumps(updated_software_data))\nupdate_software.json()\n</code></pre> <pre><code>curl -X 'PUT' \\\n  'https://fairscape.pods.uvarc.io/software' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"@context\": {\n    \"@vocab\": \"https://schema.org/\",\n    \"evi\": \"https://w3id.org/EVI#\"\n  },\n    \"@id\": \"ark:99999/test-software\",\n    \"@type\": \"evi:software\",\n    \"name\": \"Updated software\",\n    \"description\": \"New description\",\n    \"keywords\": [ \"test\", \"fair\"],\n    \"owner\": \"ark:99999/a-person\",\n    \"author\": \"John Doe\"\n}'\n</code></pre>"},{"location":"tutorial/user/","title":"User","text":""},{"location":"tutorial/user/#create-a-user","title":"Create a user","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.pods.uvarc.io/\"\n\n\"user_data\" = {\n    \"@id\": \"ark:99999/test-user\",\n    \"name\": \"John Doe\",\n    \"type\": \"Person\",\n    \"email\": \"testuser@example.org\",\n    \"password\": \"test\",\n    \"datasets\": [],\n    \"software\": [],\n    \"computations\": [],\n    \"evidencegraphs\": []\n}\n\n# create user\ncreate_user = requests.post(root_url + \"user\", data=json.dumps(user_data))\ncreate_user.json()\n</code></pre> <pre><code>curl -X 'POST' \\\n  'https://fairscape.pods.uvarc.io/user' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"@context\": {\n    \"@vocab\": \"https://schema.org/\",\n    \"evi\": \"https://w3id.org/EVI#\"\n  },\n  \"@type\": \"Person\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"datasets\": [],\n  \"rocrates\": [],\n  \"software\": [],\n  \"computations\": [],\n  \"evidencegraphs\": [],\n  \"additionalProp1\": {}\n}'\n</code></pre>"},{"location":"tutorial/user/#fetch-a-user","title":"Fetch a user","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.pods.uvarc.io/\"\n\n# fetch user\nget_user = requests.get(root_url + f\"user/{user_data['@id']}\")\nget_user.json()\n</code></pre> <pre><code>curl -X 'GET' 'https://fairscape.pods.uvarc.io/user/ark:99999/test-user' \\\n     -H 'accept: application/json'\n</code></pre>"},{"location":"tutorial/user/#update-a-user","title":"Update a user","text":"pythoncurl <pre><code>import json\nimport requests\n\nroot_url = \"https://fairscape.pods.uvarc.io/\"\n\nupdated_user_data = {\n    \"@id\": \"ark:99999/test-user\",\n    \"name\": \"Updated User\", # with a new name\n    \"type\": \"Person\",\n    \"email\": \"testuser@example.org\",\n    \"password\": \"test\",\n    \"datasets\": [],\n    \"software\": [],\n    \"computations\": [],\n    \"evidencegraphs\": []\n }\n\n# update user\nupdate_user = requests.put(root_url + \"user\", data=json.dumps(updated_user_data))\nupdate_user.json()\n</code></pre> <pre><code>curl -X 'PUT' \\\n  'https://fairscape.pods.uvarc.io/user' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"@context\": {\n    \"@vocab\": \"https://schema.org/\",\n    \"evi\": \"https://w3id.org/EVI#\"\n  },\n  \"@type\": \"Person\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"datasets\": [],\n  \"rocrates\": [],\n  \"software\": [],\n  \"computations\": [],\n  \"evidencegraphs\": [],\n  \"additionalProp1\": {}\n}'\n</code></pre>"}]}